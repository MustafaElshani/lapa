rule download_fasta_human:
    output:
        config['wg_encode']['fasta'].format(specie='human')
    shell:
        "wget -O - https://www.encodeproject.org/files/GRCh38_no_alt_analysis_set_GCA_000001405.15/@@download/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz | gunzip -c > {output}"


rule download_gtf_human:
    output:
        config['wg_encode']['gtf_raw'].format(specie='human')
    shell:
        "wget -O - https://www.encodeproject.org/files/ENCFF991WIA/@@download/ENCFF991WIA.gtf.gz | gunzip -c > {output}"


rule download_chrom_sizes_human:
    output:
        config['wg_encode']['chrom_sizes'].format(specie='human')
    shell:
        "wget https://www.encodeproject.org/files/ENCFF667IGK/@@download/ENCFF667IGK.tsv -O {output}"


rule download_fasta_mouse:
    output:
        config['wg_encode']['fasta'].format(specie='mouse')
    shell:
        "wget -O - https://www.encodeproject.org/files/mm10_no_alt_analysis_set_ENCODE/@@download/mm10_no_alt_analysis_set_ENCODE.fasta.gz | gunzip -c >  {output}"


rule download_gtf_mouse:
    output:
        config['wg_encode']['gtf_raw'].format(specie='mouse')
    shell:
        "wget -O - https://www.encodeproject.org/files/gencode.vM21.primary_assembly.annotation_UCSC_names/@@download/gencode.vM21.primary_assembly.annotation_UCSC_names.gtf.gz | gunzip -c > {output}"


rule download_chrom_sizes_mouse:
    output:
        config['wg_encode']['chrom_sizes'].format(specie='mouse')
    shell:
        "wget https://www.encodeproject.org/files/mm10_no_alt.chrom.sizes/@@download/mm10_no_alt.chrom.sizes.tsv -O {output}"


rule download_wg_read_annot:
    params:
        drive_id = (lambda wildcards:
                    config['wg_encode']['drive_id'][wildcards.specie]['read_annot'])
    output:
        config['wg_encode']['talon']['read_annot']
    shell:
        "gdown --id {params.drive_id} -O {output}"


rule download_wg_gtf:
    params:
        drive_id = (lambda wildcards:
                    config['wg_encode']['drive_id'][wildcards.specie]['gtf'])
    output:
        config['wg_encode']['talon']['gtf']
    shell:
        "gdown --id {params.drive_id} -O {output}"

rule download_wg_abundance:
    params:
        drive_id = (lambda wildcards:
                    config['wg_encode']['drive_id'][wildcards.specie]['abundance'])
    output:
        config['wg_encode']['talon']['abundance']
    shell:
        "gdown --id {params.drive_id} -O {output}"


rule download_cage:
    output:
        config['wg_encode']['cage']['bed']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bed.gz -O {output}"


rule download_cCREs_promotors:
    output:
        config['wg_encode']['cCREs']['promotors']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/cCREs/GRCh38-PLS.bed -O {output}"


rule download_cCREs_proximal_enhancers:
    output:
        config['wg_encode']['cCREs']['proximal_enhancers']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/GRCh38-ccREs.pELS.bed -O {output}"


rule download_cCREs_distal_enhancers:
    output:
        config['wg_encode']['cCREs']['distal_enhancers']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/GRCh38-ccREs.dELS.bed -O {output}"


# rule wg_utr_fix:
#     input:
#         gtf = config['wg_encode']['gtf_raw']
#     output:
#         gtf = config['wg_encode']['gtf']
#     shell:
#         "gencode_utr_fix --input_gtf {input.gtf} --output_gtf {output.gtf}"


# rule lapa_wg:
#     input:
#         aligment = config['wg_encode']['talon']['read_annot'],
#         fasta = config['wg_encode']['fasta'],
#         gtf = config['wg_encode']['gtf'],
#         chrom_sizes = config['wg_encode']['chrom_sizes']
#     threads: 4
#     resources:
#         mem_gb = 64
#     output:
#         directory(config['wg_encode']['lapa'])
#     shell:
#         "lapa \
#         --alignment {input.aligment} \
#         --fasta {input.fasta} \
#         --annotation {input.gtf} \
#         --chrom_sizes {input.chrom_sizes} \
#         --output_dir {output}"


# rule correct_gtf_wg:
#     input:
#         read_annot = config['wg_encode']['talon']['read_annot'],
#         gtf = config['wg_encode']['talon']['gtf'],
#         lapa_dir = config['wg_encode']['lapa'],
#         fasta = config['wg_encode']['fasta']
#     output:
#         gtf = protected(config['wg_encode']['talon']['gtf_corrected'])
#     shell:
#         "lapa_correct_talon_gtf \
#         --gtf_input {input.gtf} \
#         --gtf_output {output.gtf} \
#         --lapa_dir {input.lapa_dir} \
#         --read_annot {input.read_annot} \
#         --fasta {input.fasta}"


# rule wg_overlap_tes_talon:
#     input:
#         lapa_dir = config['lapa']['lapa_quantseq_dir'].format(sample='WTC11'),
#         gtf = config['wg_encode']['talon']['gtf'],
#         abundance = config['wg_encode']['talon']['abundance']
#     params:
#         max_distance = 50
#     output:
#         overlap = 'data/results/wg/overlap/{specie}_overlap_annotation.csv'
#     script:
#         "../common/overlap_talon.py"


# rule wg_overlap_tss_talon:
#     input:
#         cage = expand(config['wg_encode']['cage']['bed'],
#                       encode_id=config['wg_encode']['cage']['gm12']),
#         gtf = config['wg_encode']['talon']['gtf'],
#         abundance = config['wg_encode']['talon']['abundance']
#     params:
#         max_distance = 50,
#         samples = ['gm12878_1_1', 'gm12878_1_2', 'gm12878_1_3',
#                    'gm12878_1_4', 'gm12878_3_1', 'gm12878_2_1', 'gm12878_2_2']
#     output:
#         overlap = 'data/results/wg/overlap/{specie}_overlap_tss_annotation.csv'
#     script:
#         "../common/overlap_cage_talon.py"


# rule wg_overlap_tes_corrected_talon:
#     input:
#         lapa_dir = config['lapa']['lapa_quantseq_dir'].format(sample='WTC11'),
#         gtf = config['wg_encode']['talon']['gtf_corrected'],
#         abundance = config['wg_encode']['talon']['abundance']
#     params:
#         max_distance = 50
#     output:
#         overlap = 'data/results/wg/overlap/{specie}_overlap_corrected_annotation.csv'
#     script:
#         "../common/overlap_talon.py"


# rule wg_overlap_tss_corrected_talon:
#     input:
#         cage = expand(config['wg_encode']['cage']['bed'],
#                       encode_id=config['wg_encode']['cage']['gm12']),
#         gtf = config['wg_encode']['talon']['gtf_corrected'],
#         abundance = config['wg_encode']['talon']['abundance']
#     params:
#         max_distance = 50,
#         samples = ['gm12878_1_1', 'gm12878_1_2', 'gm12878_1_3',
#                    'gm12878_1_4', 'gm12878_3_1', 'gm12878_2_1', 'gm12878_2_2']
#     output:
#         overlap = 'data/results/wg/overlap/{specie}_overlap_tss_corrected_annotation.csv'
#     script:
#         "../common/overlap_cage_talon.py"


# rule wg_plot_overlap_annotation:
#     input:
#         uncorrected = 'data/results/wg/overlap/{specie}_overlap_annotation.csv',
#         corrected = 'data/results/wg/overlap/{specie}_overlap_corrected_annotation.csv'
#     output:
#         fig = 'reports/wg/figures/correction/{specie}_overlap_annotation_both.png'
#     notebook:
#         '../correction/plot_overlap_annotation.ipynb'


# rule wg_plot_overlap_tss_annotation:
#     input:
#         uncorrected = 'data/results/wg/overlap/{specie}_overlap_tss_annotation.csv',
#         corrected = 'data/results/wg/overlap/{specie}_overlap_tss_corrected_annotation.csv'
#     output:
#         fig = 'reports/wg/figures/correction/{specie}_overlap_annotation_tss_both.png'
#     notebook:
#         '../correction/plot_overlap_annotation.ipynb'


rule theme3_tss:
    input:
        gtf = config['wg_encode']['gtf'].format(specie='human'),
        gtf_talon = config['wg_encode']['talon']['gtf'].format(
            specie='human'),
        gtf_talon_corrected = config['wg_encode']['talon']['gtf_corrected'].format(
            specie='human'),
        abundance = config['wg_encode']['talon']['abundance'].format(
            specie='human'),
        ccres_promotors = config['wg_encode']['cCREs']['promotors'],
        ccres_proximal_enhancers = config['wg_encode']['cCREs']['proximal_enhancers'],
        ccres_distal_enhancers = config['wg_encode']['cCREs']['distal_enhancers'],
        fantom = config['wg_encode']['fantom']
    output:
        fig = 'reports/wg/figures/ccres/overlap_ccres.png'
    notebook:
        '../wg_encode/theme3_tss.ipynb'


rule all_wg_encode:
    input:
        'reports/wg/figures/ccres/overlap_ccres.png'

        # config['wg_encode']['cCREs']['promotors'],
        # expand('reports/wg/figures/correction/{specie}_overlap_annotation_tss_both.png',
        #        specie=['human'])

        # expand('reports/wg/figures/correction/{specie}_overlap_annotation_both.png',
        #        specie=['human']),
