import pandas as pd


def counts_fastq(wildcards):
    platform = wildcards['platform']
    library_prep = wildcards['library_prep']

    if platform in {'PacBio', 'ONT'}:
        return expand(config['encode']['fastq_read_count'],
                      encode_id=file_acc_long_reads(wildcards))

    elif platform == 'Illumina' and library_prep == 'se':
        sample = wildcards['sample']
        encode_id = file_acc_short_reads(wildcards)
        return expand(config['encode']['fastq_read_count'],
                      encode_id=encode_id, sample=sample)

    elif platform == 'Illumina' and library_prep == 'quantseq':
        return expand(config['quantseq']['fastq_read_count'],
                      rep=['1', '2', '3'], sample=sample)

    else:
        raise ValueError('No samples match given wildcards %s'
                         % str(wildcards))


def _read_counts(wildcards):
    df = pd.read_csv(config['lrgasp']['config'], sep='\t')
    _df = df[
        (df['file_contents'] == 'reads') &
        (df['sample'] == 'WTC11') &
        (df['platform'].isin({'PacBio', 'ONT'})) &
        (df['library_prep'] != 'R2C2')
    ]
    _df_r2c2 = df[
        (df['file_contents'] == 'reads') &
        (df['sample'] == 'WTC11') &
        (df['platform'].isin({'PacBio', 'ONT'})) &
        (df['library_prep'] == 'R2C2')
    ]
    return _df, _df_r2c2


def read_counts_fastq(wildcards):
    _df, _df_r2c2 = _read_counts(wildcards)
    return [
        *expand(config['encode']['fastq_read_count'],
                encode_id=_df['file_acc'].tolist()),
        *expand(config['encode']['fasta_read_count'],
                encode_id=_df_r2c2['file_acc'].tolist())
    ]


def read_counts_bam(wildcards):
    _df, _df_r2c2 = _read_counts(wildcards)
    return [
        *expand(config['encode']['bam_read_count'],
                encode_id=_df['file_acc'].tolist()),
        *expand(config['encode']['bam_read_count'],
                encode_id=_df_r2c2['file_acc'].tolist())
    ]


rule read_nums_datasets:
    input:
        long_fastq = read_counts_fastq,
        long_bam = read_counts_bam,

        short_fastq = expand(config['encode']['fastq_read_count'],
                             encode_id=config['short_rnaseq']['se'], sample='{sample}'),
        short_bam = expand(config['short_rnaseq']['bam_read_count'],
                           encode_id=config['short_rnaseq']['se'], sample='{sample}'),

        quantseq_fastq = expand(config['encode']['fastq_read_count'],
                                encode_id=config['quantseq']['fastq']),
        quantseq_bam = expand(config['encode']['bam_read_count'],
                              encode_id=config['quantseq']['bam'])
    output:
        read_nums = "reports/figures/read_nums_datasets_{sample}.png"
    params:
        df_lrgasp = df_lrgasp
    threads: 1
    resources:
        mem_gb = 32
    notebook:
        "read_nums_datasets.ipynb"


rule hist_read_counts:
    input:
        tes = (lambda wildcards: config['common']['tes'].format(
            genome=genome(wildcards))),
        lapa_dir = config['lapa']['lapa_dir']
    output:
        hist = 'data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_hist.csv',
        percentage = 'data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_percentage.txt'
    threads: 1
    resources:
        mem_gb = 4
    script:
        'hist_read_counts.py'


rule plot_hist_read_count:
    input:
        hist = [
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_hist.csv',
                    sample='{sample}', platform='PacBio', counting=['end'],
                    library_prep=pb_library_prep),
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_hist.csv',
                    sample='{sample}', platform='ONT', counting=['end'],
                    library_prep=ont_library_prep),
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_hist.csv',
                    sample='{sample}', platform='Illumina', counting='end',
                    library_prep='quantseq'),
            # *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_hist.csv',
            #         sample='{sample}', platform='Illumina', counting='end',
            #         library_prep='se')
        ],
        percentage = [
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_percentage.txt',
                    sample='{sample}', platform='PacBio', counting=['end'],
                    library_prep=pb_library_prep),
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_percentage.txt',
                    sample='{sample}', platform='ONT', counting=['end'],
                    library_prep=ont_library_prep),
            *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_percentage.txt',
                    sample='{sample}', platform='Illumina', counting=['end'],
                    library_prep='quantseq'),
            # *expand('data/results/benchmark/hist/{sample}/{library_prep}_{platform}_{counting}_percentage.txt',
            #         sample='{sample}', platform='Illumina', counting=['end'],
            #         library_prep='se')
        ]
    output:
        hist = 'reports/figures/{sample}_hist_read_counts.png',
        percent = 'reports/figures/{sample}_percentage_of_reads_tes.png'
    threads: 1
    resources:
        mem_gb = 4
    notebook:
        'hist_read_count.ipynb'


rule plot_major_isoform_gene_exp:
    input:
        lapa_dir = [
            *expand(config['lapa']['lapa_dir'],
                    sample='{sample}', platform='PacBio', counting=['end'],
                    library_prep=pb_library_prep),
            *expand(config['lapa']['lapa_dir'],
                    sample='{sample}', platform='ONT', counting=['end'],
                    library_prep=ont_library_prep),
            *expand(config['lapa']['lapa_dir'],
                    sample='{sample}', platform='Illumina', counting='end',
                    library_prep='quantseq')
        ],
        gene_exp = config['short_rnaseq']['gene_exp']
    output:
        hist = 'reports/figures/{sample}_plot_major_isoform_gene_exp.png',
        fracA = 'reports/figures/{sample}_plot_fracA.png'
    notebook:
        'plot_major_isoform_gene_exp.ipynb'


rule all_plot:
    input:
        expand(
            'reports/figures/read_nums_datasets_{sample}.png',
            sample='WTC11'
        ),
        expand(
            'reports/figures/{sample}_plot_major_isoform_gene_exp.png',
            sample='WTC11'
        ),
        expand(
            'reports/figures/{sample}_hist_read_counts.png',
            sample='WTC11'
        )
